#!/bin/bash

# Create the network (should already be there with an error for this).
# One node per VM works better without a Docker network; bridge is the best we can do.
netup
   
# This could be bad, but it works for dev.
docker stop cass1

# Cannot recreate with the same name (docker-compose does this on "down").
# Do it on up so the logs are laying about should I want them.
docker rm cass1

# --restart
#   always will restart after a shutdown, if the container is running at the time.
# --net
#   vm-bridge is created by netup; it is what it sounds like.
# -p
#   7000 is the configurable storage_port
#   7001 is the secure version ssl_storage_port
#   7199 is JMX
#   8084 is the Prometheus JMX exporter (see cassandra-env.sh)
#   9042 is the configurable native_transport_port (for clients)
#   9160 is Thrift
# -v
#   make /var/lib/cassandra persistent 
#   override /etc/cassandra for configuration; we need access to more than cassandra.yaml
#   create /logs directory is also handy for transferring arbitrary data to/from the container
#   create /casslib for the prometheus .jar (see cassandra-env.sh)
# -e
#   Docker Cassandra "helpfully" rewrites IP addresses in cassandra.yaml; this is not as bad
#       as one may think, because external IPs don't bind. It does some magic if you
#       pass them in as environment variables.
#   not-stack1 has CASSANDRA_SEEDS= for the same reason.
docker run --name cass1 \
    -d \
    --restart always \
    --net=vm-bridge \
    -p 7000:7000 \
    -p 7001:7001 \
    -p 7199:7199 \
    -p 8084:8084 \
    -p 9042:9042 \
    -p 9160:9160 \
    -v ~/cluster-test/stack1/cassandra/data:/var/lib/cassandra/ \
    -v ~/cluster-test/stack1/conf/etccassandra:/etc/cassandra \
    -v ~/cluster-test/stack1/cassandra/logs:/logs \
    -v ~/cluster-test/common/bin:/casslib \
    -v ~/cluster-test/stack1/bin:/scripts \
    -e CASSANDRA_BROADCAST_ADDRESS=10.247.246.201 \
    cassandra:3.11 /bin/bash /scripts/start_cass.sh
