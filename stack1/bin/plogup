#!/bin/bash

# Create the network (should already be there with an error for this).
# One node per VM works better without a Docker network; bridging is the next best option.
netup
   
# This could be bad, but it works for dev.
docker stop plog1

# Cannot recreate with the same name (docker-compose does this on "down").
# Do it on up so the logs are laying about should I want themi.
docker rm plog1

#Usage of /prometheus-logstash-exporter:
#  -log.format value
#    	Set the log target and format. Example: "logger:syslog?appname=bob&local=7" or "logger:stdout?json=true" (default "logger:stderr")
#  -log.level value
#    	Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal]
#  -logstash.host string
#    	Host address of logstash server. (default "localhost")
#  -logstash.port int
#    	Port of logstash server. (default 9600)
#  -logstash.timeout duration
#    	Timeout to get stats from logstash server. (default 5s)
#  -web.listen-address string
#    	Address to listen on for web interface and telemetry. (default ":9304")
#  -web.telemetry-path string
#    	Path under which to expose metrics. (default "/metrics")

# --net
#   vm-bridge is created by netup; it is what it sounds like.
# --restart
#   always is just easy
# -p
#   9095 maps 9304 - see above - to stick with the Prometheus on 909x pattern
# -v
# command
#   changing the host to the name
docker run --name plog1 \
    -d \
    --net=vm-bridge \
    --restart always \
    -p 9095:9304 \
    alxrem/prometheus-logstash-exporter -logstash.host stack1.cluster.test
